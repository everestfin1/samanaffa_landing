generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  phone              String              @unique
  firstName          String
  lastName           String
  dateOfBirth        DateTime?
  nationality        String?
  address            String?
  city               String?
  preferredLanguage  String              @default("fr")
  emailVerified      Boolean             @default(false)
  phoneVerified      Boolean             @default(false)
  marketingAccepted  Boolean             @default(false)
  kycStatus          KycStatus           @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  civilite           String?
  country            String?
  district           String?
  domaineActivite    String?
  idExpiryDate       DateTime?
  idIssueDate        DateTime?
  idNumber           String?
  idType             String?
  metiers            String?
  otpVerifiedAt      DateTime?
  passwordHash       String?
  placeOfBirth       String?
  privacyAccepted    Boolean             @default(false)
  region             String?
  signature          String?
  statutEmploi       String?
  termsAccepted      Boolean             @default(false)
  kycDocuments       KycDocument[]
  otpCodes           OtpCode[]
  sessions           Session[]
  transactionIntents TransactionIntent[]
  accounts           UserAccount[]
  notifications      Notification[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model OtpCode {
  id                   String              @id @default(cuid())
  userId               String?
  registrationSessionId String?
  code                 String
  type                 OtpType
  expiresAt            DateTime
  used                 Boolean             @default(false)
  createdAt            DateTime            @default(now())
  user                 User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrationSession  RegistrationSession? @relation(fields: [registrationSessionId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model UserAccount {
  id                 String              @id @default(cuid())
  userId             String
  accountType        AccountType
  accountNumber      String              @unique
  balance            Decimal             @default(0.00) @db.Decimal(15, 2)
  status             AccountStatus       @default(ACTIVE)
  createdAt          DateTime            @default(now())
  transactionIntents TransactionIntent[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_accounts")
}

model TransactionIntent {
  id                String            @id @default(cuid())
  userId            String
  accountId         String
  accountType       AccountType
  intentType        IntentType
  amount            Decimal           @db.Decimal(15, 2)
  paymentMethod     String
  investmentTranche String?
  investmentTerm    Int?
  userNotes         String?
  adminNotes        String?
  status            TransactionStatus @default(PENDING)
  referenceNumber   String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  account           UserAccount       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transaction_intents")
}

model KycDocument {
  id                 String             @id @default(cuid())
  userId             String
  documentType       String
  fileUrl            String
  fileName           String
  uploadDate         DateTime           @default(now())
  verificationStatus VerificationStatus @default(PENDING)
  adminNotes         String?
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kyc_documents")
}

model AdminUser {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String
  name           String
  role           AdminRole @default(ADMIN)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  failedAttempts Int       @default(0)
  isActive       Boolean   @default(true)
  lockedUntil    DateTime?
  updatedAt      DateTime  @updatedAt

  @@map("admin_users")
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum OtpType {
  EMAIL
  SMS
}

enum AccountType {
  SAMA_NAFFA
  APE_INVESTMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum IntentType {
  DEPOSIT
  INVESTMENT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum AdminRole {
  ADMIN
  MANAGER
  SUPPORT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  KYC_STATUS
  TRANSACTION
  SYSTEM
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum SessionType {
  REGISTRATION
  LOGIN
}

model RegistrationSession {
  id        String      @id @default(cuid())
  email     String
  phone     String
  data      String      // JSON string containing registration form data
  type      SessionType @default(REGISTRATION)
  expiresAt DateTime
  createdAt DateTime    @default(now())
  otpCodes  OtpCode[]

  @@map("registration_sessions")
}

model Notification {
  id          String             @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType   @default(INFO)
  status      NotificationStatus @default(UNREAD)
  priority    NotificationPriority @default(NORMAL)
  metadata    String?            // JSON string for additional data
  readAt      DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
