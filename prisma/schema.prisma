generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  phone              String              @unique
  passwordHash       String?
  firstName          String
  lastName           String
  dateOfBirth        DateTime?
  nationality        String?
  address            String?
  city               String?
  preferredLanguage  String              @default("fr")
  emailVerified      Boolean             @default(false)
  phoneVerified      Boolean             @default(false)
  otpVerifiedAt      DateTime?
  kycStatus          KycStatus           @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  civilite           String?
  country            String?
  region             String?
  department         String?
  arrondissement     String?
  district           String?
  domaineActivite    String?
  idExpiryDate       DateTime?
  idIssueDate        DateTime?
  idNumber           String?
  idType             String?
  marketingAccepted  Boolean             @default(false)
  metiers            String?
  placeOfBirth       String?
  privacyAccepted    Boolean             @default(false)
  signature          String?
  statutEmploi       String?
  termsAccepted      Boolean             @default(false)
  kycDocuments       KycDocument[]
  otpCodes           OtpCode[]
  sessions           Session[]
  transactionIntents TransactionIntent[]
  accounts           UserAccount[]
  notifications      Notification[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model OtpCode {
  id                    String              @id @default(cuid())
  userId                String?
  registrationSessionId String?
  code                  String
  type                  OtpType
  expiresAt             DateTime
  used                  Boolean             @default(false)
  createdAt             DateTime            @default(now())
  user                  User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrationSession   RegistrationSession? @relation(fields: [registrationSessionId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model UserAccount {
  id                        String              @id @default(cuid())
  userId                    String
  accountType               AccountType
  accountNumber             String              @unique
  productCode               String?
  productName               String?
  interestRate              Decimal?            @db.Decimal(15, 2)
  lockPeriodMonths          Int?
  lockedUntil               DateTime?
  allowAdditionalDeposits   Boolean             @default(true)
  metadata                  Json?
  balance                   Decimal             @default(0.00) @db.Decimal(15, 2)
  status                    AccountStatus       @default(ACTIVE)
  createdAt                 DateTime            @default(now())
  transactionIntents        TransactionIntent[]
  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_accounts")
}

model TransactionIntent {
  id                    String            @id @default(cuid())
  userId                String
  accountId             String
  accountType           AccountType
  intentType            IntentType
  amount                Decimal           @db.Decimal(15, 2)
  paymentMethod         String
  investmentTranche     String?
  investmentTerm        Int?
  userNotes             String?
  adminNotes            String?
  status                TransactionStatus @default(PENDING)
  referenceNumber       String            @unique
  providerTransactionId String?           @unique
  providerStatus        String?
  lastCallbackAt        DateTime?
  lastCallbackPayload   Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  account               UserAccount       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentCallbacks      PaymentCallbackLog[]

  @@map("transaction_intents")
}

model PaymentCallbackLog {
  id                String            @id @default(cuid())
  transactionIntentId String
  status            String
  payload           Json
  createdAt         DateTime          @default(now())
  transactionIntent TransactionIntent @relation(fields: [transactionIntentId], references: [id], onDelete: Cascade)

  @@map("payment_callback_logs")
}

model KycDocument {
  id                 String             @id @default(cuid())
  userId             String
  documentType       String
  fileUrl            String
  fileName           String
  uploadDate         DateTime           @default(now())
  verificationStatus VerificationStatus @default(PENDING)
  adminNotes         String?
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kyc_documents")
}

model AdminUser {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String
  name           String
  role           AdminRole @default(ADMIN)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  failedAttempts Int       @default(0)
  isActive       Boolean   @default(true)
  lockedUntil    DateTime?
  updatedAt      DateTime  @updatedAt

  @@map("admin_users")
}

model RegistrationSession {
  id        String      @id @default(cuid())
  email     String
  phone     String
  data      String
  type      SessionType @default(REGISTRATION)
  expiresAt DateTime
  createdAt DateTime    @default(now())
  otpCodes  OtpCode[]

  @@map("registration_sessions")
}

model Notification {
  id              String        @id @default(cuid())
  userId          String
  title           String
  message         String
  type            NotificationType
  priority        NotificationPriority
  isRead          Boolean       @default(false)
  metadata        String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum OtpType {
  EMAIL
  SMS
}

enum AccountType {
  SAMA_NAFFA
  APE_INVESTMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum IntentType {
  DEPOSIT
  INVESTMENT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum AdminRole {
  ADMIN
  MANAGER
  SUPPORT
}

enum SessionType {
  REGISTRATION
  LOGIN
}

enum NotificationType {
  KYC_STATUS
  SUCCESS
  ERROR
  WARNING
  TRANSACTION
  SECURITY
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
