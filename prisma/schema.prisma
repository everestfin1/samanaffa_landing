// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users (main authentication and profile - OTP-only)
model User {
  id                String     @id @default(cuid())
  email             String     @unique
  phone             String     @unique
  firstName         String
  lastName          String
  civilite          String?
  dateOfBirth       DateTime?
  placeOfBirth      String?
  nationality       String?
  address           String?
  city              String?
  country           String?
  region            String?
  district          String?
  statutEmploi      String?
  metiers           String?
  domaineActivite   String?
  idType            String?
  idNumber          String?
  idIssueDate       DateTime?
  idExpiryDate      DateTime?
  termsAccepted     Boolean    @default(false)
  privacyAccepted   Boolean    @default(false)
  signature         String?
  preferredLanguage String     @default("fr")
  emailVerified     Boolean    @default(false)
  phoneVerified     Boolean    @default(false)
  kycStatus         KycStatus  @default(PENDING)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  accounts          UserAccount[]
  transactionIntents TransactionIntent[]
  kycDocuments      KycDocument[]
  otpCodes          OtpCode[]
  sessions          Session[]

  @@map("users")
}

// OTP Sessions (managed by NextAuth.js)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// OTP Codes (temporary storage)
model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  type      OtpType
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

// User Accounts (auto-created: Sama Naffa + APE)
model UserAccount {
  id            String      @id @default(cuid())
  userId        String
  accountType   AccountType
  accountNumber String      @unique
  balance       Decimal     @default(0.00) @db.Decimal(15, 2)
  status        AccountStatus @default(ACTIVE)
  createdAt     DateTime    @default(now())

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionIntents TransactionIntent[]

  @@map("user_accounts")
}

// Transaction Intents (core innovation)
model TransactionIntent {
  id                String            @id @default(cuid())
  userId            String
  accountId         String
  accountType       AccountType
  intentType        IntentType
  amount            Decimal           @db.Decimal(15, 2)
  paymentMethod     String
  investmentTranche String?           // A, B, C, D (for APE only)
  investmentTerm    Int?              // 3, 5, 7, 10 years (for APE only)
  userNotes         String?
  adminNotes        String?
  status            TransactionStatus @default(PENDING)
  referenceNumber   String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  account           UserAccount       @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("transaction_intents")
}

// KYC Documents
model KycDocument {
  id                String           @id @default(cuid())
  userId            String
  documentType      String
  fileUrl           String
  fileName          String
  uploadDate        DateTime         @default(now())
  verificationStatus VerificationStatus @default(PENDING)
  adminNotes        String?

  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kyc_documents")
}

// Admin Users
model AdminUser {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String
  name           String
  role           AdminRole @default(ADMIN)
  isActive       Boolean   @default(true)
  failedAttempts Int       @default(0)
  lockedUntil    DateTime?
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("admin_users")
}

// Enums
enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum OtpType {
  EMAIL
  SMS
}

enum AccountType {
  SAMA_NAFFA
  APE_INVESTMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum IntentType {
  DEPOSIT
  INVESTMENT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum AdminRole {
  ADMIN
  MANAGER
  SUPPORT
}
